# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
#
# contributed by Antoine Pitrou
# modified by Dominique Wahli
# modified by Heinrich Acker
# modified by Kay Lange

if True:
    def make_tree(item, depth):
        if not depth: return item, None, None
        let item2 = item + item
        depth -= 1
        return item, make_tree(item2 - 1, depth), make_tree(item2, depth)

    def check_tree(node):
        if not node[1]: return node[0]
        return node[0] + check_tree(node[1]) - check_tree(node[2])

    let min_depth = 4
    let max_depth = 12
    let stretch_depth = max_depth + 1

    print("stretch tree of depth", stretch_depth, "check:", check_tree(make_tree(0, stretch_depth)))

    let long_lived_tree = make_tree(0, max_depth)

    let iterations = 2 ** max_depth
    for depth = min_depth; depth < stretch_depth; depth += 2:

        let check = 0
        for i in range(1, iterations + 1):
            check += check_tree(make_tree(i, depth)) + check_tree(make_tree(-i, depth))

        print(iterations * 2, "trees of depth", depth, "check:", check)
        iterations = iterations // 4

    print("long lived tree of depth", max_depth, "check:", check_tree(long_lived_tree))
